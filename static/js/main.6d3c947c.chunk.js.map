{"version":3,"sources":["components/TravelItem.js","components/SettingsPopover.js","services/hooks/useLocalStorage.js","services/consts.js","components/CategoryIcon.js","services/hooks/useTranslatedCategory.js","components/AddItemControls.js","services/helpers.js","components/TravelCard.js","components/Main.js","components/BottomNavbar.js","components/Footer.js","services/providers/LanguageProvider.js","components/LanguageLink.js","components/LanguagePicker.js","components/NavbarWithSidebar/NavbarContent.js","components/NavbarWithSidebar/SidebarContent.js","components/NavbarWithSidebar/NavbarWithSidebar.js","App.js","i18n.js","serviceWorker.js","index.js"],"names":["StyledButtonLink","styled","div","theme","orbit","heightCheckbox","widthCheckbox","TravelItem","item","shouldShowDeleteButton","toggleCheckedItem","handleDeleteItem","t","useTranslation","tKey","isChecked","direction","align","justify","spacing","label","name","checked","onChange","disabled","type","size","iconLeft","ariaHidden","title","onClick","SettingsPopover","translatedCategory","toggleSettings","handleShowDelete","handleResetCard","handleDeselectAll","handleSelectAll","isSettingsOpened","content","as","category","icon","map","fullWidth","opened","onOpen","onClose","width","useLocalStorage","key","initialValue","window","localStorage","getItem","useState","JSON","parse","storedValue","setStoredValue","value","setItem","stringify","LIST_CATEGORIES","LANGUAGES","LANGUAGES_DATA","flagCode","EDIT_MODE","CategoryIcon","useTranslatedCategory","AddItemControls","handleSubmitNewItem","doesAlreadyExistInItems","error","newItem","setNewItem","placeholder","e","text","target","charAt","toUpperCase","slice","toLowerCase","ref","input","focus","preventDefault","TravelCard","initialCardItems","cardItems","setCardItems","editMode","setEditMode","isRemoveItemsMode","itemTKey","filter","id","style","scrollMarginTop","titleAs","actions","Card","desktop","newItemValue","Boolean","find","ESSENTIALS","CLOTHES","TOILETRIES","OTHER","spaceSmall","defaultTokens","spaceMedium","spaceLarge","MainWrapper","main","borderColorCard","media","largeMobile","css","tablet","largeDesktop","Main","columnGap","rowGap","columns","items","data","StyledBottomNavbar","nav","paletteWhite","boxShadowFixedReverse","StyledButton","button","backgroundButtonLinkPrimary","borderRadiusLarge","backgroundButtonLinkPrimaryHover","colorIconPrimary","HamburgerButton","toggleSidebar","CategoryButton","element","document","getElementById","scrollIntoView","behavior","aria-label","BottomNavbar","FooterWrapper","footer","spaceXXLarge","Footer","href","external","noUnderline","LanguageContext","React","createContext","useLanguage","context","useContext","Error","LanguageProvider","children","selectedLanguage","setSelectedLanguage","i18n","Provider","language","setLanguage","changeLanguage","LanguageLink","event","standAlone","code","LanguagePicker","isPopoverOpen","setIsPopoverOpen","Object","keys","lang","handleChangeLanguage","preferredAlign","fixed","StyledHeading","StyledIllustration","NavbarContent","isLargeMobile","useMediaQuery","shrink","alt","SidebarContentPart","indent","AboutLink","SidebarContent","closeSidebar","dataTest","NavbarWithSidebar","isSidebarOpen","setIsSidebarOpen","isBottomNavbarVisible","onMenuOpen","shown","App","defaultTheme","dictionary","button_close","resources","translations","enTranslations","esTranslations","siTranslations","use","initReactI18next","init","lng","fallbackLng","ns","defaultNS","keySeparator","interpolation","escapeValue","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d3c947c.chunk.js","sourcesContent":["// @flow\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Checkbox from \"@kiwicom/orbit-components/lib/Checkbox\"\nimport ButtonLink from \"@kiwicom/orbit-components/lib/ButtonLink\"\nimport { Close } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport type { CardItem } from \"../services/types\"\n\nconst StyledButtonLink = styled.div`\n  button {\n    height: ${({ theme }) => theme.orbit.heightCheckbox};\n    width: ${({ theme }) => theme.orbit.widthCheckbox};\n  }\n`\n\ntype Props = {|\n  item: CardItem,\n  shouldShowDeleteButton: boolean,\n  toggleCheckedItem: string => void,\n  handleDeleteItem: string => void,\n|}\n\nconst TravelItem = ({\n  item,\n  shouldShowDeleteButton,\n  toggleCheckedItem,\n  handleDeleteItem,\n}: Props): React$Node => {\n  const { t } = useTranslation()\n  const { tKey, isChecked } = item\n\n  return (\n    <Stack direction=\"row\" align=\"start\" justify=\"between\" spacing=\"medium\">\n      <Checkbox\n        label={t(tKey)}\n        name={t(tKey)}\n        checked={isChecked}\n        onChange={() => toggleCheckedItem(tKey)}\n        disabled={shouldShowDeleteButton}\n      />\n      {shouldShowDeleteButton && (\n        <StyledButtonLink>\n          <ButtonLink\n            type=\"critical\"\n            size=\"small\"\n            iconLeft={<Close ariaHidden />}\n            title={t(\"button.delete_item\", { item: t(tKey) })}\n            onClick={() => handleDeleteItem(tKey)}\n          />\n        </StyledButtonLink>\n      )}\n    </Stack>\n  )\n}\n\nexport default TravelItem\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport {\n  CheckCircle,\n  CircleEmpty,\n  Remove,\n  Replace,\n  Settings,\n} from \"@kiwicom/orbit-components/lib/icons\"\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\"\n\ntype Props = {|\n  translatedCategory: string,\n  toggleSettings: () => void,\n  handleShowDelete: () => void,\n  handleResetCard: () => void,\n  handleDeselectAll: () => void,\n  handleSelectAll: () => void,\n  isSettingsOpened: boolean,\n|}\n\nconst SettingsPopover = ({\n  translatedCategory,\n  toggleSettings,\n  handleShowDelete,\n  handleResetCard,\n  handleDeselectAll,\n  handleSelectAll,\n  isSettingsOpened,\n}: Props): React$Node => {\n  const { t } = useTranslation()\n\n  return (\n    <Popover\n      content={\n        <Stack direction=\"column\" spacing=\"medium\">\n          <Heading type=\"title4\" as=\"h3\">\n            {t(\"title.settings_list\", { category: translatedCategory })}\n          </Heading>\n          {[\n            {\n              tKey: \"button.check_all\",\n              onClick: handleSelectAll,\n              icon: <CheckCircle ariaHidden />,\n            },\n            {\n              tKey: \"button.uncheck_all\",\n              onClick: handleDeselectAll,\n              icon: <CircleEmpty ariaHidden />,\n            },\n            {\n              tKey: \"button.remove_items\",\n              onClick: handleShowDelete,\n              icon: <Remove ariaHidden />,\n            },\n            {\n              tKey: \"button.reset_list\",\n              onClick: handleResetCard,\n              icon: <Replace ariaHidden />,\n              type: \"criticalSubtle\",\n            },\n          ].map(({ tKey, type = \"secondary\", onClick, icon }) => (\n            <Button key={tKey} type={type} iconLeft={icon} size=\"small\" onClick={onClick} fullWidth>\n              {t(tKey)}\n            </Button>\n          ))}\n        </Stack>\n      }\n      opened={isSettingsOpened}\n      onOpen={toggleSettings}\n      onClose={toggleSettings}\n      width=\"250px\"\n    >\n      <Button\n        size=\"small\"\n        type=\"secondary\"\n        iconLeft={<Settings ariaHidden />}\n        title={t(\"title.settings_list\", { category: translatedCategory })}\n      />\n    </Popover>\n  )\n}\n\nexport default SettingsPopover\n","// @flow\nimport { useState } from \"react\"\n\nexport default function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  // get value from local storage by key\n  const item = window.localStorage.getItem(key)\n\n  const [storedValue, setStoredValue] = useState<T>(item ? JSON.parse(item) : initialValue)\n\n  const setValue = (value: T) => {\n    // save state\n    setStoredValue(value)\n\n    // save to local storage\n    window.localStorage.setItem(key, JSON.stringify(value))\n  }\n\n  return [storedValue, setValue]\n}\n","// @flow\nimport type { LanguagesData } from \"./types\"\n\nexport const LIST_CATEGORIES = {\n  ESSENTIALS: \"essentials\",\n  CLOTHES: \"clothes\",\n  TOILETRIES: \"toiletries\",\n  OTHER: \"other\",\n}\n\nexport const LANGUAGES = {\n  ENGLISH: \"en\",\n  SLOVENIAN: \"si\",\n  SPANISH: \"es\",\n}\n\nexport const LANGUAGES_DATA: LanguagesData = {\n  [LANGUAGES.ENGLISH]: {\n    value: LANGUAGES.ENGLISH,\n    flagCode: \"gb\",\n    title: \"English\",\n  },\n  [LANGUAGES.SPANISH]: {\n    value: LANGUAGES.SPANISH,\n    flagCode: \"es\",\n    title: \"Español\",\n  },\n  [LANGUAGES.SLOVENIAN]: {\n    value: LANGUAGES.SLOVENIAN,\n    flagCode: \"si\",\n    title: \"Slovenščina\",\n  },\n}\n\nexport const EDIT_MODE = {\n  DEFAULT: \"default\",\n  OPEN_SETTINGS: \"openSettings\",\n  REMOVE_ITEMS: \"removeItems\",\n  ADD_ITEM: \"addItem\",\n}\n","// @flow\nimport React from \"react\"\nimport { Spa, Suitcase, Wallet, TermsAndConditions } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport type { ListCategory } from \"../services/types\"\n\ntype Props = {|\n  category: ListCategory,\n|}\n\nconst CategoryIcon = ({ category }: Props): React$Node => {\n  switch (category) {\n    case LIST_CATEGORIES.ESSENTIALS:\n      return <Wallet ariaHidden />\n    case LIST_CATEGORIES.TOILETRIES:\n      return <Spa ariaHidden />\n    case LIST_CATEGORIES.OTHER:\n      return <TermsAndConditions ariaHidden />\n    case LIST_CATEGORIES.CLOTHES:\n    default:\n      return <Suitcase ariaHidden />\n  }\n}\n\nexport default CategoryIcon\n","// @flow\nimport { useTranslation } from \"react-i18next\"\n\nimport { LIST_CATEGORIES } from \"../consts\"\nimport type { ListCategory } from \"../types\"\n\nconst useTranslatedCategory = (category: ListCategory): string => {\n  const { t } = useTranslation()\n\n  switch (category) {\n    case LIST_CATEGORIES.ESSENTIALS:\n      return t(\"category.essentials\")\n    case LIST_CATEGORIES.TOILETRIES:\n      return t(\"category.toiletries\")\n    case LIST_CATEGORIES.OTHER:\n      return t(\"category.other\")\n    case LIST_CATEGORIES.CLOTHES:\n    default:\n      return t(\"category.clothes\")\n  }\n}\n\nexport default useTranslatedCategory\n","// @flow\nimport React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport InputField from \"@kiwicom/orbit-components/lib/InputField\"\nimport { capitalize } from \"../services/helpers\"\n\ntype Props = {|\n  handleSubmitNewItem: string => void,\n  doesAlreadyExistInItems: string => boolean,\n|}\n\nconst AddItemControls = ({ handleSubmitNewItem, doesAlreadyExistInItems }: Props): React$Node => {\n  const { t } = useTranslation()\n  const [newItem, setNewItem] = useState({ value: \"\", error: null })\n\n  const handleInputChange = e => {\n    setNewItem({ error: null, value: capitalize(e.target.value) })\n  }\n\n  const handleValidateAndSubmit = e => {\n    if (!newItem.value) {\n      setNewItem({ ...newItem, error: t(\"input.error.enter_item\") })\n    } else if (doesAlreadyExistInItems(newItem.value)) {\n      setNewItem({ ...newItem, error: t(\"input.error.already_exist\") })\n    } else {\n      e.preventDefault()\n      handleSubmitNewItem(newItem.value)\n    }\n  }\n\n  return (\n    <Stack direction=\"row\" spacing=\"XSmall\">\n      <InputField\n        name=\"New item\"\n        size=\"small\"\n        placeholder={t(\"placeholder.type_item\")}\n        value={newItem.value}\n        onChange={handleInputChange}\n        error={newItem.error}\n        ref={input => input && input.focus()}\n      />\n      <Button size=\"small\" onClick={handleValidateAndSubmit}>\n        {t(\"button.save\")}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default AddItemControls\n","// @flow\n\nexport const capitalize = (text: string): string => {\n  return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase()\n}\n","// @flow\nimport React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Card, { CardSection } from \"@kiwicom/orbit-components/lib/Card\"\nimport Button from \"@kiwicom/orbit-components/lib/Button\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport { Plus } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport TravelItem from \"./TravelItem\"\nimport SettingsPopover from \"./SettingsPopover\"\nimport type { CardItems, ListCategory } from \"../services/types\"\nimport useLocalStorage from \"../services/hooks/useLocalStorage\"\nimport { EDIT_MODE } from \"../services/consts\"\nimport CategoryIcon from \"./CategoryIcon\"\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\"\nimport AddItemControls from \"./AddItemControls\"\n\ntype Props = {|\n  category: ListCategory,\n  initialCardItems: CardItems,\n|}\n\nconst TravelCard = ({ category, initialCardItems }: Props): React$Node => {\n  const { t } = useTranslation()\n  const translatedCategory = useTranslatedCategory(category)\n  const [cardItems, setCardItems] = useLocalStorage<CardItems>(\n    `travel-packing-list:list-${category}`,\n    initialCardItems,\n  )\n  const [editMode, setEditMode] = useState(EDIT_MODE.DEFAULT)\n\n  const isRemoveItemsMode = editMode === EDIT_MODE.REMOVE_ITEMS\n\n  const toggleSettings = () => {\n    if (editMode === EDIT_MODE.OPEN_SETTINGS) {\n      setEditMode(EDIT_MODE.DEFAULT)\n    } else {\n      setEditMode(EDIT_MODE.OPEN_SETTINGS)\n    }\n  }\n\n  const handleDeleteItem = (itemTKey: string) => {\n    setCardItems(cardItems.filter(item => item.tKey !== itemTKey))\n  }\n\n  const toggleCheckedItem = (itemTKey: string) => {\n    setCardItems(\n      cardItems.map(item =>\n        item.tKey === itemTKey ? { ...item, isChecked: !item.isChecked } : item,\n      ),\n    )\n  }\n\n  const handleResetCard = () => {\n    setCardItems(initialCardItems)\n    setEditMode(EDIT_MODE.DEFAULT)\n  }\n\n  const handleDeselectAll = () => {\n    setCardItems(cardItems.map(item => ({ ...item, isChecked: false })))\n    setEditMode(EDIT_MODE.DEFAULT)\n  }\n\n  const handleSelectAll = () => {\n    setCardItems(cardItems.map(item => ({ ...item, isChecked: true })))\n    setEditMode(EDIT_MODE.DEFAULT)\n  }\n\n  const handleSubmitNewItem = (newItemValue: string) => {\n    setCardItems([...cardItems, { tKey: newItemValue, isChecked: false }])\n    setEditMode(EDIT_MODE.DEFAULT)\n  }\n\n  return (\n    <Card\n      title={\n        <span id={category} style={{ scrollMarginTop: \"65px\" }}>\n          {translatedCategory}\n        </span>\n      }\n      titleAs=\"h2\"\n      icon={<CategoryIcon category={category} />}\n      actions={\n        <SettingsPopover\n          translatedCategory={translatedCategory}\n          toggleSettings={toggleSettings}\n          handleShowDelete={() => setEditMode(EDIT_MODE.REMOVE_ITEMS)}\n          handleResetCard={handleResetCard}\n          handleDeselectAll={handleDeselectAll}\n          handleSelectAll={handleSelectAll}\n          isSettingsOpened={editMode === EDIT_MODE.OPEN_SETTINGS}\n        />\n      }\n    >\n      <CardSection>\n        <Stack direction=\"column\" spacing=\"medium\" desktop={{ spacing: \"XSmall\" }}>\n          {cardItems.map(item => (\n            <TravelItem\n              key={item.tKey}\n              item={item}\n              shouldShowDeleteButton={isRemoveItemsMode}\n              toggleCheckedItem={toggleCheckedItem}\n              handleDeleteItem={handleDeleteItem}\n            />\n          ))}\n          {editMode === EDIT_MODE.ADD_ITEM ? (\n            <AddItemControls\n              handleSubmitNewItem={handleSubmitNewItem}\n              doesAlreadyExistInItems={newItemValue =>\n                Boolean(cardItems.find(item => newItemValue === t(item.tKey)))\n              }\n            />\n          ) : (\n            <Stack direction=\"row\" justify=\"between\">\n              <Button\n                type=\"secondary\"\n                iconLeft={<Plus ariaHidden />}\n                size=\"small\"\n                onClick={() => setEditMode(EDIT_MODE.ADD_ITEM)}\n                disabled={isRemoveItemsMode}\n              >\n                {t(\"button.add_item\")}\n              </Button>\n              {isRemoveItemsMode && (\n                <Button type=\"critical\" size=\"small\" onClick={() => setEditMode(EDIT_MODE.DEFAULT)}>\n                  {t(\"button.done\")}\n                </Button>\n              )}\n            </Stack>\n          )}\n        </Stack>\n      </CardSection>\n    </Card>\n  )\n}\n\nexport default TravelCard\n","// @flow\nimport React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport { defaultTokens } from \"@kiwicom/orbit-design-tokens\"\nimport Grid from \"@kiwicom/orbit-components/lib/utils/Grid\"\nimport media from \"@kiwicom/orbit-components/lib/utils/mediaQuery\"\n\nimport TravelCard from \"./TravelCard\"\nimport data from \"../services/data.json\"\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport type { CardItems } from \"../services/types\"\n\nconst { ESSENTIALS, CLOTHES, TOILETRIES, OTHER } = LIST_CATEGORIES\n\nconst { spaceSmall, spaceMedium, spaceLarge } = defaultTokens\n\nconst MainWrapper = styled.main`\n  background-color: ${({ theme }) => theme.orbit.borderColorCard};\n  padding: ${({ theme }) => theme.orbit.spaceSmall};\n  margin-top: 52px; // because of navbar\n\n  ${media.largeMobile(css`\n    padding: ${({ theme }) => theme.orbit.spaceMedium};\n  `)};\n\n  ${media.tablet(css`\n    margin-top: 64px; // because of navbar\n  `)};\n\n  ${media.largeDesktop(css`\n    padding: ${({ theme }) => theme.orbit.spaceLarge};\n  `)};\n`\n\nfunction cardItemsMapper(items: Array<string>): CardItems {\n  return items.map(item => ({ tKey: item, isChecked: false }))\n}\n\nconst Main = (): React$Node => {\n  return (\n    <MainWrapper>\n      <Grid\n        columnGap={spaceMedium}\n        rowGap={spaceSmall}\n        largeMobile={{ columns: \"1fr 1fr\", rowGap: spaceMedium }}\n        desktop={{ columns: \"1fr 1fr 1fr 1fr\" }}\n        largeDesktop={{ rowGap: spaceLarge, columnGap: spaceLarge }}\n      >\n        {[ESSENTIALS, CLOTHES, TOILETRIES, OTHER].map(category => (\n          <TravelCard\n            key={category}\n            category={category}\n            initialCardItems={cardItemsMapper(data[category].items)}\n          />\n        ))}\n      </Grid>\n    </MainWrapper>\n  )\n}\n\nexport default Main\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport styled from \"styled-components\"\nimport MenuHamburger from \"@kiwicom/orbit-components/lib/icons/MenuHamburger\"\n\nimport { LIST_CATEGORIES } from \"../services/consts\"\nimport useTranslatedCategory from \"../services/hooks/useTranslatedCategory\"\nimport CategoryIcon from \"./CategoryIcon\"\nimport type { ListCategory } from \"../services/types\"\n\nconst { ESSENTIALS, CLOTHES, TOILETRIES, OTHER } = LIST_CATEGORIES\n\nexport const BOTTOM_NAVBAR_HEIGHT = 50 // px\n\nconst StyledBottomNavbar = styled.nav`\n  height: ${BOTTOM_NAVBAR_HEIGHT}px;\n  width: 100%;\n  background: ${({ theme }) => theme.orbit.paletteWhite};\n  box-shadow: ${({ theme }) => theme.orbit.boxShadowFixedReverse};\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  align-content: center;\n  flex-direction: row;\n  justify-content: space-around;\n  z-index: 700;\n`\n\nconst StyledButton = styled.button`\n  width: 60px;\n  height: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  padding: 0;\n  background: ${({ theme }) => theme.orbit.backgroundButtonLinkPrimary};\n  border-radius: ${({ theme }) => theme.orbit.borderRadiusLarge};\n  outline: 0;\n\n  @media (hover: hover) {\n    &:hover,\n    &:focus {\n      background: ${({ theme }) => theme.orbit.backgroundButtonLinkPrimaryHover};\n    }\n  }\n\n  span {\n    font-size: 8px;\n    letter-spacing: 0.5px;\n    text-align: center;\n    color: ${({ theme }) => theme.orbit.colorIconPrimary};\n    user-select: none; // disable selecting text (Chrome was selecting it when you clicked button text)\n  }\n`\n\ntype HamburgerButtonProps = {|\n  toggleSidebar: () => void,\n|}\nconst HamburgerButton = ({ toggleSidebar }: HamburgerButtonProps): React$Node => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledButton onClick={toggleSidebar}>\n      <MenuHamburger ariaHidden />\n      <span>{t(\"button.more\")}</span>\n    </StyledButton>\n  )\n}\n\ntype CategoryButtonProps = {|\n  category: ListCategory,\n|}\nconst CategoryButton = ({ category }: CategoryButtonProps): React$Node => {\n  const { t } = useTranslation()\n  const translatedCategory = useTranslatedCategory(category)\n\n  return (\n    <StyledButton\n      key={category}\n      onClick={() => {\n        const element = document.getElementById(category)\n        return element && element.scrollIntoView({ behavior: \"smooth\" })\n      }}\n      aria-label={t(\"button.scroll_to_list\", { category: translatedCategory })}\n    >\n      <CategoryIcon category={category} />\n      <span>{translatedCategory}</span>\n    </StyledButton>\n  )\n}\n\ntype Props = {|\n  toggleSidebar: () => void,\n|}\n\nconst BottomNavbar = ({ toggleSidebar }: Props): React$Node => {\n  return (\n    <StyledBottomNavbar aria-label=\"Category navigation bar\">\n      {[ESSENTIALS, CLOTHES, TOILETRIES, OTHER].map(category => (\n        <CategoryButton key={category} category={category} />\n      ))}\n      <HamburgerButton toggleSidebar={toggleSidebar} />\n    </StyledBottomNavbar>\n  )\n}\n\nexport default BottomNavbar\n","// @flow\nimport React from \"react\"\nimport styled, { css } from \"styled-components\"\nimport media from \"@kiwicom/orbit-components/lib/utils/mediaQuery\"\nimport Text from \"@kiwicom/orbit-components/lib/Text\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\nimport { BOTTOM_NAVBAR_HEIGHT } from \"./BottomNavbar\"\n\nconst FooterWrapper = styled.footer`\n  background-color: ${({ theme }) => theme.orbit.borderColorCard};\n  padding: ${({ theme }) => `0 ${theme.orbit.spaceXXLarge} ${theme.orbit.spaceSmall}`};\n  margin-bottom: ${BOTTOM_NAVBAR_HEIGHT}px;\n  user-select: none; // disable selecting text (Chrome was selecting it when you clicked bottom navbar button)\n\n  ${media.largeMobile(css`\n    padding: ${({ theme }) => `0 ${theme.orbit.spaceMedium} ${theme.orbit.spaceMedium}`};\n    margin-bottom: 0;\n  `)};\n`\n\nconst Footer = (): React$Node => {\n  return (\n    <FooterWrapper>\n      <Text size=\"small\" align=\"center\">\n        <TextLink href=\"https://flanzana.github.io/\" external type=\"secondary\" noUnderline>\n          Žana Flander\n        </TextLink>\n        <span> © 2021</span>\n      </Text>\n    </FooterWrapper>\n  )\n}\n\nexport default Footer\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nimport useLocalStorage from \"../hooks/useLocalStorage\"\nimport { LANGUAGES } from \"../consts\"\nimport type { Language } from \"../types\"\n\ntype LanguageContextType = {|\n  language: Language,\n  setLanguage: Language => void,\n|}\n\nconst LanguageContext = React.createContext<LanguageContextType | null>(null)\n\ntype LanguageProviderProps = {|\n  children: React$Node,\n|}\n\nconst LanguageProvider = ({ children }: LanguageProviderProps): React$Node => {\n  const [selectedLanguage, setSelectedLanguage] = useLocalStorage<Language>(\n    \"travel-packing-list:language\",\n    LANGUAGES.ENGLISH,\n  )\n  const { i18n } = useTranslation()\n\n  const handleSetLanguage = (language: Language) => {\n    setSelectedLanguage(language)\n    i18n.changeLanguage(language)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        language: selectedLanguage,\n        setLanguage: handleSetLanguage,\n      }}\n    >\n      {children}\n    </LanguageContext.Provider>\n  )\n}\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = React.useContext(LanguageContext)\n\n  if (!context) {\n    throw new Error(\"useLanguage must be used within the LanguageProvider.\")\n  }\n\n  return context\n}\n\nexport default LanguageProvider\n","// @flow\nimport React from \"react\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport CountryFlag from \"@kiwicom/orbit-components/lib/CountryFlag\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\n\nimport { LANGUAGES_DATA } from \"../services/consts\"\nimport type { Language } from \"../services/types\"\n\ntype Props = {|\n  onClick: () => void,\n  language: Language,\n|}\n\nconst LanguageLink = ({ language, onClick }: Props): React$Node => (\n  <TextLink\n    onClick={event => {\n      event.preventDefault()\n      onClick()\n    }}\n    href=\"#\" // for keyboard access\n    type=\"secondary\"\n    title={LANGUAGES_DATA[language].title}\n    standAlone\n  >\n    <Stack direction=\"row\" align=\"center\" spacing=\"XSmall\">\n      <CountryFlag code={LANGUAGES_DATA[language].flagCode} name=\"\" />\n      <span>{LANGUAGES_DATA[language].title}</span>\n    </Stack>\n  </TextLink>\n)\n\nexport default LanguageLink\n","// @flow\nimport React, { useState } from \"react\"\nimport CountryFlag from \"@kiwicom/orbit-components/lib/CountryFlag\"\nimport LinkList from \"@kiwicom/orbit-components/lib/LinkList\"\nimport ButtonLink from \"@kiwicom/orbit-components/lib/ButtonLink\"\nimport Popover from \"@kiwicom/orbit-components/lib/Popover\"\n\nimport { LANGUAGES_DATA } from \"../services/consts\"\nimport type { Language } from \"../services/types\"\nimport { useLanguage } from \"../services/providers/LanguageProvider\"\nimport LanguageLink from \"./LanguageLink\"\n\nconst LanguagePicker = (): React$Node => {\n  const { language, setLanguage } = useLanguage()\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false)\n\n  const handleChangeLanguage = (lang: Language) => {\n    setLanguage(lang)\n    setIsPopoverOpen(false)\n  }\n\n  return (\n    <Popover\n      opened={isPopoverOpen}\n      onOpen={() => setIsPopoverOpen(true)}\n      onClose={() => setIsPopoverOpen(false)}\n      content={\n        <LinkList spacing=\"none\">\n          {Object.keys(LANGUAGES_DATA).map(lang => (\n            <LanguageLink key={lang} language={lang} onClick={() => handleChangeLanguage(lang)} />\n          ))}\n        </LinkList>\n      }\n      preferredAlign=\"end\"\n      fixed\n    >\n      <ButtonLink type=\"secondary\" title={LANGUAGES_DATA[language].title}>\n        <CountryFlag code={LANGUAGES_DATA[language].flagCode} name=\"\" />\n      </ButtonLink>\n    </Popover>\n  )\n}\n\nexport default LanguagePicker\n","// @flow\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport { useTranslation } from \"react-i18next\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport Illustration from \"@kiwicom/orbit-components/lib/Illustration\"\nimport useMediaQuery from \"@kiwicom/orbit-components/lib/hooks/useMediaQuery\"\n\nimport LanguagePicker from \"../LanguagePicker\"\n\nconst StyledHeading = styled.div`\n  h1 {\n    text-transform: uppercase;\n  }\n`\nconst StyledIllustration = styled.div`\n  img {\n    max-height: 30px !important;\n  }\n`\n\nconst NavbarContent = (): React$Node => {\n  const { t } = useTranslation()\n  const { isLargeMobile } = useMediaQuery()\n\n  return (\n    <Stack direction=\"row\" align=\"center\" justify=\"between\">\n      <Stack\n        direction=\"row\"\n        align=\"center\"\n        spacing=\"XSmall\"\n        shrink\n        largeMobile={{ spacing: \"medium\" }}\n      >\n        <StyledIllustration>\n          <Illustration name=\"CabinBaggage\" size=\"extraSmall\" alt=\"\" />\n        </StyledIllustration>\n        <StyledHeading>\n          <Heading type=\"title3\" as=\"h1\">\n            {t(\"title\")}\n          </Heading>\n        </StyledHeading>\n      </Stack>\n      {isLargeMobile && <LanguagePicker />}\n    </Stack>\n  )\n}\n\nexport default NavbarContent\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport LinkList from \"@kiwicom/orbit-components/lib/LinkList\"\nimport TextLink from \"@kiwicom/orbit-components/lib/TextLink\"\nimport Stack from \"@kiwicom/orbit-components/lib/Stack\"\nimport Heading from \"@kiwicom/orbit-components/lib/Heading\"\nimport Separator from \"@kiwicom/orbit-components/lib/Separator\"\nimport { Code } from \"@kiwicom/orbit-components/lib/icons\"\n\nimport { LANGUAGES_DATA } from \"../../services/consts\"\nimport LanguageLink from \"../LanguageLink\"\nimport type { Language } from \"../../services/types\"\nimport { useLanguage } from \"../../services/providers/LanguageProvider\"\n\ntype SidebarContentPartProps = {|\n  title: string,\n  children: React$Node,\n|}\nconst SidebarContentPart = ({ title, children }: SidebarContentPartProps): React$Node => (\n  <>\n    <Separator />\n    <Stack>\n      <Heading type=\"title5\">{title}</Heading>\n      <LinkList indent spacing=\"none\">\n        {children}\n      </LinkList>\n    </Stack>\n  </>\n)\n\ntype AboutLinkProps = {|\n  href: string,\n  label: string,\n|}\nconst AboutLink = ({ href, label }: AboutLinkProps): React$Node => (\n  <TextLink href={href} type=\"secondary\" title={label} standAlone external>\n    <Stack direction=\"row\" align=\"center\" spacing=\"XSmall\">\n      <Code size=\"small\" />\n      <span>{label}</span>\n    </Stack>\n  </TextLink>\n)\n\ntype Props = {|\n  closeSidebar: () => void,\n|}\n\nconst SidebarContent = ({ closeSidebar }: Props): React$Node => {\n  const { t } = useTranslation()\n  const { setLanguage } = useLanguage()\n\n  const handleChangeLanguage = (language: Language) => {\n    setLanguage(language)\n    closeSidebar()\n  }\n\n  return (\n    <Stack dataTest=\"SidebarContent\">\n      <SidebarContentPart title={t(\"sidebar.title.language\")}>\n        {Object.keys(LANGUAGES_DATA).map(lang => (\n          <LanguageLink key={lang} language={lang} onClick={() => handleChangeLanguage(lang)} />\n        ))}\n      </SidebarContentPart>\n      <SidebarContentPart title={t(\"sidebar.title.more_about\")}>\n        <AboutLink label=\"Žana Flander\" href=\"https://flanzana.github.io/\" />\n        <AboutLink label=\"Design system Orbit\" href=\"https://orbit.kiwi\" />\n      </SidebarContentPart>\n    </Stack>\n  )\n}\n\nexport default SidebarContent\n","// @flow\nimport React, { useState } from \"react\"\nimport NavigationBar from \"@kiwicom/orbit-components/lib/NavigationBar\"\nimport Drawer from \"@kiwicom/orbit-components/lib/Drawer\"\nimport useMediaQuery from \"@kiwicom/orbit-components/lib/hooks/useMediaQuery\"\n\nimport NavbarContent from \"./NavbarContent\"\nimport SidebarContent from \"./SidebarContent\"\nimport BottomNavbar from \"../BottomNavbar\"\n\nconst NavbarWithSidebar = (): React$Node => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n  const { isLargeMobile } = useMediaQuery()\n\n  // not visible on screen wider than 575px\n  const isBottomNavbarVisible = !isLargeMobile\n\n  return (\n    <>\n      <NavigationBar\n        // hide hamburger icon because it is visible in bottom navbar\n        {...(!isBottomNavbarVisible && { onMenuOpen: () => setIsSidebarOpen(true) })}\n        dataTest=\"NavigationBar\"\n      >\n        <NavbarContent />\n      </NavigationBar>\n      {isBottomNavbarVisible && (\n        <BottomNavbar toggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)} />\n      )}\n      <Drawer shown={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} dataTest=\"Sidebar\">\n        <SidebarContent closeSidebar={() => setIsSidebarOpen(false)} />\n      </Drawer>\n    </>\n  )\n}\n\nexport default NavbarWithSidebar\n","// @flow\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport ThemeProvider from \"@kiwicom/orbit-components/lib/ThemeProvider\"\nimport defaultTheme from \"@kiwicom/orbit-components/lib/defaultTheme\"\n\nimport Main from \"./components/Main\"\nimport Footer from \"./components/Footer\"\nimport NavbarWithSidebar from \"./components/NavbarWithSidebar/NavbarWithSidebar\"\nimport LanguageProvider from \"./services/providers/LanguageProvider\"\n\nfunction App(): React$Node {\n  const { t } = useTranslation()\n\n  return (\n    <ThemeProvider\n      theme={{ ...defaultTheme }}\n      dictionary={{\n        button_close: t(\"button.close\"),\n      }}\n    >\n      <LanguageProvider>\n        <>\n          <NavbarWithSidebar />\n          <Main />\n          <Footer />\n        </>\n      </LanguageProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// @flow\nimport i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n\nimport enTranslations from \"./services/translations/en.json\"\nimport siTranslations from \"./services/translations/si.json\"\nimport esTranslations from \"./services/translations/es.json\"\nimport { LANGUAGES } from \"./services/consts\"\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  [LANGUAGES.ENGLISH]: {\n    translations: enTranslations,\n  },\n  [LANGUAGES.SPANISH]: {\n    translations: esTranslations,\n  },\n  [LANGUAGES.SLOVENIAN]: {\n    translations: siTranslations,\n  },\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng:\n      JSON.parse(window.localStorage.getItem(\"travel-packing-list:language\")) || LANGUAGES.ENGLISH,\n    fallbackLng: LANGUAGES.ENGLISH,\n\n    // have a common namespace used around the full app\n    ns: [\"translations\"],\n    defaultNS: \"translations\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\n\nexport default i18n\n","/* istanbul ignore file */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// eslint-disable-next-line flowtype/require-valid-file-annotation\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// @flow\n/* istanbul ignore file */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport \"./i18n\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}